import os
import logging
import datetime
import random
from telegram import (
    Update, 
    ReplyKeyboardMarkup, 
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes, 
    ConversationHandler
)

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
BOT_TOKEN = os.environ['BOT_TOKEN']

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

MONTH, YEAR, ZODIAC = range(3)
user_data = {}

ZODIAC_SIGNS = ['–æ–≤–µ–Ω', '—Ç–µ–ª–µ—Ü', '–±–ª–∏–∑–Ω–µ—Ü—ã', '—Ä–∞–∫', '–ª–µ–≤', '–¥–µ–≤–∞', '–≤–µ—Å—ã', '—Å–∫–æ—Ä–ø–∏–æ–Ω', '—Å—Ç—Ä–µ–ª–µ—Ü', '–∫–æ–∑–µ—Ä–æ–≥', '–≤–æ–¥–æ–ª–µ–π', '—Ä—ã–±—ã']
MONTHS = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [['‚ú® –£–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—É–¥—å–±—É'], ['üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üîÆ *–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ*\n*–£–∑–Ω–∞–π —Å–≤–æ—é —Å—É–¥—å–±—É*\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! ‚ú®",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def start_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥"""
    keyboard = [
        ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç'],
        ['–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å'],
        ['–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å'],
        ['–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f'üîÆ –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è:',
        reply_markup=reply_markup
    )
    return MONTH

async def month_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    month = update.message.text
    if month not in MONTHS:
        keyboard = [
            ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç'],
            ['–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å'],
            ['–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å'],
            ['–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text('‚ùå –í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü –∏–∑ —Å–ø–∏—Å–∫–∞:', reply_markup=reply_markup)
        return MONTH
    
    context.user_data['month'] = month
    await update.message.reply_text(
        f'‚úÖ –ú–µ—Å—è—Ü "{month}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n–í–≤–µ–¥–∏ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è (4 —Ü–∏—Ñ—Ä—ã):',
        reply_markup=ReplyKeyboardRemove()
    )
    return YEAR

async def year_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    year = update.message.text
    if not year.isdigit() or len(year) != 4:
        await update.message.reply_text('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (4 —Ü–∏—Ñ—Ä—ã):')
        return YEAR
    
    year_int = int(year)
    current_year = datetime.datetime.now().year
    if year_int < 1900 or year_int > current_year:
        await update.message.reply_text(f'‚ùå –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≥–æ–¥ (1900-{current_year}):')
        return YEAR
    
    context.user_data['year'] = year
    keyboard = [
        ['–û–≤–µ–Ω', '–¢–µ–ª–µ—Ü', '–ë–ª–∏–∑–Ω–µ—Ü—ã'],
        ['–†–∞–∫', '–õ–µ–≤', '–î–µ–≤–∞'],
        ['–í–µ—Å—ã', '–°–∫–æ—Ä–ø–∏–æ–Ω', '–°—Ç—Ä–µ–ª–µ—Ü'],
        ['–ö–æ–∑–µ—Ä–æ–≥', '–í–æ–¥–æ–ª–µ–π', '–†—ã–±—ã']
    ]
    await update.message.reply_text(
        '‚úÖ –ì–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –í—ã–±–µ—Ä–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:',
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return ZODIAC

async def zodiac_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    zodiac = update.message.text.lower()
    if zodiac not in [z.lower() for z in ZODIAC_SIGNS]:
        keyboard = [
            ['–û–≤–µ–Ω', '–¢–µ–ª–µ—Ü', '–ë–ª–∏–∑–Ω–µ—Ü—ã'],
            ['–†–∞–∫', '–õ–µ–≤', '–î–µ–≤–∞'],
            ['–í–µ—Å—ã', '–°–∫–æ—Ä–ø–∏–æ–Ω', '–°—Ç—Ä–µ–ª–µ—Ü'],
            ['–ö–æ–∑–µ—Ä–æ–≥', '–í–æ–¥–æ–ª–µ–π', '–†—ã–±—ã']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text('‚ùå –í—ã–±–µ—Ä–∏ –∑–Ω–∞–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:', reply_markup=reply_markup)
        return ZODIAC
    
    context.user_data['zodiac'] = zodiac
    user_data[update.message.from_user.id] = context.user_data.copy()
    
    keyboard = [['üîÆ –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'], ['üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å']]
    await update.message.reply_text(
        f'‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ó–Ω–∞–∫: {zodiac.title()}',
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return ConversationHandler.END

async def show_horoscope(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in user_data:
        zodiac = user_data[user_id]['zodiac']
        horoscope = get_daily_horoscope(zodiac)
        
        await update.message.reply_text(
            f'‚ú® *–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {zodiac.title()}*\n'
            f'üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è: {datetime.datetime.now().strftime("%d.%m.%Y")}\n\n'
            f'{horoscope}',
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π –ø—Ä–æ—Ñ–∏–ª—å: /start')

async def restart_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if user_id in user_data:
        del user_data[user_id]
    context.user_data.clear()
    
    keyboard = [['‚ú® –£–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—É–¥—å–±—É'], ['üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å']]
    await update.message.reply_text(
        'üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!',
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == '‚ú® –£–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—É–¥—å–±—É':
        await start_conversation(update, context)
    elif text == 'üîÆ –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è':
        await show_horoscope(update, context)
    elif text == 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å':
        await restart_bot(update, context)

def get_daily_horoscope(zodiac_sign):
    today = datetime.datetime.now()
    random.seed(f"{zodiac_sign}_{today.strftime('%Y%m%d')}")
    
    horoscopes = {
        '–æ–≤–µ–Ω': "‚ôà –°–µ–≥–æ–¥–Ω—è –∑–≤–µ–∑–¥—ã –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç—Å—Ç–≤—É—é—Ç –Ω–æ–≤—ã–º –Ω–∞—á–∏–Ω–∞–Ω–∏—è–º! –°–º–µ–ª–æ –±–µ—Ä–∏—Ç–µ—Å—å –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã.",
        '—Ç–µ–ª–µ—Ü': "‚ôâ –•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π. –í–æ–∑–º–æ–∂–Ω—ã –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è.",
        '–±–ª–∏–∑–Ω–µ—Ü—ã': "‚ôä –í–∞—Å –∂–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ. –ë—É–¥—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è.",
        '—Ä–∞–∫': "‚ôã –ü–æ–∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Å–≤–æ–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏. –í–µ—á–µ—Ä –ø—Ä–æ–≤–µ–¥–∏—Ç–µ –≤ —Å–ø–æ–∫–æ–π–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ.",
        '–ª–µ–≤': "‚ôå –í–∞—à–∞ —Ö–∞—Ä–∏–∑–º–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ!",
        '–¥–µ–≤–∞': "‚ôç –î–µ–Ω—å –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞.",
        '–≤–µ—Å—ã': "‚ôé –í–∞–∂–Ω—ã –≥–∞—Ä–º–æ–Ω–∏—è –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å—ã.",
        '—Å–∫–æ—Ä–ø–∏–æ–Ω': "‚ôè –ì–ª—É–±–æ–∫–∏–µ –º—ã—Å–ª–∏ –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –≤–∞–∂–Ω—ã–º –æ—Ç–∫—Ä—ã—Ç–∏—è–º.",
        '—Å—Ç—Ä–µ–ª–µ—Ü': "‚ôê –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏–Ω–µ—Å—É—Ç –ø–æ–ª—å–∑—É.",
        '–∫–æ–∑–µ—Ä–æ–≥': "‚ôë –£–ø–æ—Ä—Å—Ç–≤–æ –ø–æ–º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏—á—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.",
        '–≤–æ–¥–æ–ª–µ–π': "‚ôí –î–µ–Ω—å –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç—Å—Ç–≤—É–µ—Ç —Ç–≤–æ—Ä—á–µ—Å—Ç–≤—É.",
        '—Ä—ã–±—ã': "‚ôì –ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏."
    }
    return horoscopes.get(zodiac_sign.lower(), "üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.TEXT & filters.Regex('^‚ú® –£–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—É–¥—å–±—É$'), start_conversation),
            CommandHandler("start", start_conversation)
        ],
        states={
            MONTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, month_handler)],
            YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, year_handler)],
            ZODIAC: [MessageHandler(filters.TEXT & ~filters.COMMAND, zodiac_handler)],
        },
        fallbacks=[CommandHandler("restart", restart_bot)]
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("restart", restart_bot))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway!")
    application.run_polling()

if __name__ == '__main__':
    main()
