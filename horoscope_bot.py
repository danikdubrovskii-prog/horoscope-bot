import os
import logging
from telegram import (
    Update, 
    ReplyKeyboardMarkup, 
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes, 
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Railway
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
BOT_TOKEN = os.environ.get('BOT_TOKEN')

if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

logger.info("‚úÖ BOT_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω")

MONTH, YEAR, ZODIAC = range(3)
user_data = {}

ZODIAC_SIGNS = ['–æ–≤–µ–Ω', '—Ç–µ–ª–µ—Ü', '–±–ª–∏–∑–Ω–µ—Ü—ã', '—Ä–∞–∫', '–ª–µ–≤', '–¥–µ–≤–∞', '–≤–µ—Å—ã', '—Å–∫–æ—Ä–ø–∏–æ–Ω', '—Å—Ç—Ä–µ–ª–µ—Ü', '–∫–æ–∑–µ—Ä–æ–≥', '–≤–æ–¥–æ–ª–µ–π', '—Ä—ã–±—ã']
MONTHS = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    keyboard = [['‚ú® –£–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—É–¥—å–±—É']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üîÆ *–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ*\n*–£–∑–Ω–∞–π —Å–≤–æ—é —Å—É–¥—å–±—É*\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! ‚ú®",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def start_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥"""
    logger.info("–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞")
    
    keyboard = [
        ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç'],
        ['–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å'],
        ['–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å'],
        ['–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        'üîÆ –í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è:',
        reply_markup=reply_markup
    )
    return MONTH

async def month_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    month = update.message.text
    logger.info(f"–í—ã–±—Ä–∞–Ω –º–µ—Å—è—Ü: {month}")
    
    if month not in MONTHS:
        await update.message.reply_text('‚ùå –í—ã–±–µ—Ä–∏ –º–µ—Å—è—Ü –∏–∑ —Å–ø–∏—Å–∫–∞:')
        return MONTH
    
    context.user_data['month'] = month
    await update.message.reply_text(
        f'‚úÖ –ú–µ—Å—è—Ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –í–≤–µ–¥–∏ –≥–æ–¥ (4 —Ü–∏—Ñ—Ä—ã):',
        reply_markup=ReplyKeyboardRemove()
    )
    return YEAR

async def year_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    year = update.message.text
    logger.info(f"–í–≤–µ–¥–µ–Ω –≥–æ–¥: {year}")
    
    if not year.isdigit() or len(year) != 4:
        await update.message.reply_text('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (4 —Ü–∏—Ñ—Ä—ã):')
        return YEAR
    
    context.user_data['year'] = year
    
    keyboard = [
        ['–û–≤–µ–Ω', '–¢–µ–ª–µ—Ü', '–ë–ª–∏–∑–Ω–µ—Ü—ã'],
        ['–†–∞–∫', '–õ–µ–≤', '–î–µ–≤–∞'],
        ['–í–µ—Å—ã', '–°–∫–æ—Ä–ø–∏–æ–Ω', '–°—Ç—Ä–µ–ª–µ—Ü'],
        ['–ö–æ–∑–µ—Ä–æ–≥', '–í–æ–¥–æ–ª–µ–π', '–†—ã–±—ã']
    ]
    await update.message.reply_text(
        '‚úÖ –ì–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –í—ã–±–µ—Ä–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:',
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return ZODIAC

async def zodiac_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    zodiac = update.message.text
    logger.info(f"–í—ã–±—Ä–∞–Ω –∑–Ω–∞–∫: {zodiac}")
    
    if zodiac.lower() not in [z.lower() for z in ZODIAC_SIGNS]:
        await update.message.reply_text('‚ùå –í—ã–±–µ—Ä–∏ –∑–Ω–∞–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:')
        return ZODIAC
    
    context.user_data['zodiac'] = zodiac
    user_id = update.message.from_user.id
    user_data[user_id] = context.user_data.copy()
    
    keyboard = [['üîÆ –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø']]
    await update.message.reply_text(
        f'‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ó–Ω–∞–∫: {zodiac}',
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return ConversationHandler.END

async def show_horoscope(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    logger.info(f"–ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if user_id in user_data:
        zodiac = user_data[user_id]['zodiac']
        horoscope = get_daily_horoscope(zodiac)
        await update.message.reply_text(f'‚ú® {zodiac}:\n{horoscope}')
    else:
        await update.message.reply_text('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π –ø—Ä–æ—Ñ–∏–ª—å: /start')

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logger.info(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
    
    if text == '‚ú® –£–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—É–¥—å–±—É':
        await start_conversation(update, context)
    elif text == 'üîÆ –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø':
        await show_horoscope(update, context)

def get_daily_horoscope(zodiac_sign):
    horoscopes = {
        '–æ–≤–µ–Ω': "‚ôà –°–µ–≥–æ–¥–Ω—è –∑–≤–µ–∑–¥—ã –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç—Å—Ç–≤—É—é—Ç –Ω–æ–≤—ã–º –Ω–∞—á–∏–Ω–∞–Ω–∏—è–º!",
        '—Ç–µ–ª–µ—Ü': "‚ôâ –•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.",
        '–±–ª–∏–∑–Ω–µ—Ü—ã': "‚ôä –í–∞—Å –∂–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ.",
        '—Ä–∞–∫': "‚ôã –ü–æ–∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Å–≤–æ–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.",
        '–ª–µ–≤': "‚ôå –í–∞—à–∞ —Ö–∞—Ä–∏–∑–º–∞ –Ω–∞ –≤—ã—Å–æ—Ç–µ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ!",
        '–¥–µ–≤–∞': "‚ôç –î–µ–Ω—å –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞.",
        '–≤–µ—Å—ã': "‚ôé –í–∞–∂–Ω—ã –≥–∞—Ä–º–æ–Ω–∏—è –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å—ã.",
        '—Å–∫–æ—Ä–ø–∏–æ–Ω': "‚ôè –ì–ª—É–±–æ–∫–∏–µ –º—ã—Å–ª–∏ –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –≤–∞–∂–Ω—ã–º –æ—Ç–∫—Ä—ã—Ç–∏—è–º.",
        '—Å—Ç—Ä–µ–ª–µ—Ü': "‚ôê –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏–Ω–µ—Å—É—Ç –ø–æ–ª—å–∑—É.",
        '–∫–æ–∑–µ—Ä–æ–≥': "‚ôë –£–ø–æ—Ä—Å—Ç–≤–æ –ø–æ–º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏—á—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.",
        '–≤–æ–¥–æ–ª–µ–π': "‚ôí –î–µ–Ω—å –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç—Å—Ç–≤—É–µ—Ç —Ç–≤–æ—Ä—á–µ—Å—Ç–≤—É.",
        '—Ä—ã–±—ã': "‚ôì –ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏."
    }
    return horoscopes.get(zodiac_sign.lower(), "üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

def main():
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        application = Application.builder().token(BOT_TOKEN).build()
        
        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.TEXT & filters.Regex('^‚ú® –£–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—É–¥—å–±—É$'), start_conversation),
                CommandHandler("start", start_conversation)
            ],
            states={
                MONTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, month_handler)],
                YEAR: [MessageHandler(filters.TEXT & ~filters.COMMAND, year_handler)],
                ZODIAC: [MessageHandler(filters.TEXT & ~filters.COMMAND, zodiac_handler)],
            },
            fallbacks=[]
        )
        
        application.add_handler(conv_handler)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
        
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway!")
        logger.info("ü§ñ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        application.run_polling()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        exit(1)

if __name__ == '__main__':
    main()
